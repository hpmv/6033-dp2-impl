(function() {
  var EventEmitter, JsonLineProtocol, full_lines_regex;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  EventEmitter = (require('events')).EventEmitter;
  full_lines_regex = /[^\r]+\r\n/g;
  JsonLineProtocol = (function() {
    __extends(JsonLineProtocol, EventEmitter);
    function JsonLineProtocol(max_size) {
      this.max_size = max_size != null ? max_size : 0;
      this.input = '';
    }
    JsonLineProtocol.prototype.feed = function(input) {
      if (this.input.length + input.length > this.max_size && this.max_size > 0) {
        this.emit('overflow');
        return;
      }
      this.input += input;
      this._process_input();
      if (this.input.length === 0) {
        this.emit('drain');
      } else {
        this.emit('partial');
      }
      return this.input.length;
    };
    JsonLineProtocol.prototype._process_input = function() {
      var line, lines, offset, _i, _len;
      offset = 0;
      lines = (this.input.match(full_lines_regex)) || [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        offset += line.length;
        this._process_line(line);
      }
      if (offset > 0) {
        this.input = this.input.substr(offset);
      }
    };
    JsonLineProtocol.prototype._process_line = function(line) {
      try {
        this.emit('value', JSON.parse(line = line.trim()));
      } catch (error) {
        this.emit('error', error, line);
      }
    };
    return JsonLineProtocol;
  })();
  exports.JsonLineProtocol = JsonLineProtocol;
}).call(this);
